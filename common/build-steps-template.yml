steps:
- bash: |
    docker build \
        -f $(system.defaultWorkingDirectory)/$(projectName)/Dockerfile \
        -t $(registryServerName)/$(imageName):$(build.buildId) \
        $(system.defaultWorkingDirectory)/$(projectName)
  failOnStderr: true
  displayName: 'docker build'
- bash: |
    echo $(registryPassword) | docker login \
        $(registryServerName) \
        -u $(registryLogin) \
        --password-stdin
  displayName: 'docker login'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
- bash: |
    docker push $(registryServerName)/$(imageName):$(build.buildId)
  failOnStderr: true
  displayName: 'docker push'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
- task: HelmInstaller@1
  displayName: 'install helm'
  inputs:
    helmVersionToInstall: $(helmVersion)
- bash: |
    helm init \
        --client-only
    helm package \
        $(system.defaultWorkingDirectory)/$(projectName)/charts/$(projectName)
  failOnStderr: true
  displayName: 'helm package'
- bash: |
    chartPackage=$(ls $(projectName)-*.tgz)
    chartVersion=$(echo $(basename $chartPackage) | egrep -o '[0-9].*[0-9]')
    chartVersionAlreadyExists=$(az acr helm list \
                                    -n $(registryName) \
                                    -u $(registryLogin) \
                                    -p $(registryPassword) \
                                    --query "$(projectName)[?version=='$chartVersion'].version" \
                                    -o tsv)
    if [ "$chartVersion" != "$chartVersionAlreadyExists" ]; then
        az acr helm push \
            -n $(registryName) \
            -u $(registryLogin) \
            -p $(registryPassword) \
            $chartPackage
    fi
    echo $(jq -n --arg version "$chartVersion" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
  failOnStderr: true
  name: helmPush
  displayName: 'az acr helm push'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
- publish: $(build.artifactStagingDirectory)
  artifact: build-artifact
